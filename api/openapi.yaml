# Copyright (c) Meta Platforms, Inc. and affiliates.
# Copyright (c) FullCtl and affiliates.
# Copyright (c) Cloudflare and affiliates.
# Copyright (c) Amazon.com Inc. or its affiliates.
# Copyright (c) Google and affiliates.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: 3.0.3
info:
  title: AutoPeer
  version: '1.0'
  description: |-
    AutoPeering Negotiation.

servers:
  - url: https://localhost:8080/v0.1
paths:
  /auth:
    get:
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/ErrorResponse'

  /locations:
    get:
      description: Lists all the visible locations to the caller.
      parameters:
        - name: asn
          in: query
          description: List available locations for peering with the given ASN
          required: true
          schema:
            type: integer
        - name: location_type
          in: query
          description: Optional filter for only querying locations able to
                       establish public or private connections.
          required: false
          schema:
            $ref: '#/components/schemas/LocationType'
        - name: max_results
          in: query
          description: Hint to paginate the request with the maximum number of results the caller is able to process.
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 100
        - name: next_token
          in: query
          description: Indication of the offset to retrieve the next page on a previously initiated paginated request.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ListLocationsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'

  /sessions:
    post:
      description: Requests a new set of sessions to be created.
      requestBody:
        description: Request to create peering sessions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionArray'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/responses/CreateSessionsResponse'
        '300':
          description: Request modified or partially accepted
          content:
            application/json:
              schema:
                $ref: '#/components/responses/CreateSessionsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'

    get:
      description: Lists a set of sessions visible to the caller. Each session in the set contains a summary of its current status.
      parameters:
        - name: asn
          in: query
          description: asn of requester
          required: true
          schema:
            type: integer
        - name: max_results
          in: query
          description: Hint to paginate the request with the maximum number of results the caller is able to process.
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 100
        - name: next_token
          in: query
          description: Indication of the offset to retrieve the next page on a previously initiated paginated request.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ListSessionsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'

    delete:
      description: Requests to turn the session down and delete it from the server.
      requestBody:
        description: Request to delete peering sessions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionReferenceArray'
        required: true
      responses:
        '200':
          description: Sessions are scheduled for deletion and no longer usable
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DeleteSessionsResponse'
        '300':
          description: Request modified or partially accepted
          content:
            application/json:
              schema:
                $ref: '#/components/responses/DeleteSessionsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'

  /sessions/{session_id}:
    get:
      description: Retrieves a given session by it server-generated ID provided on creation.
      parameters:
        - name: session_id
          in: path
          description: Server-generated stable identifier for the session.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse'

    delete:
      description: Requests to turn the session down and delete it from the server.
      parameters:
        parameters:
        - name: session_id
          in: path
          description: Server-generated stable identifier for the session.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session is scheduled for deletion and no longer usable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse'

components:
  schemas:
    Location:
      title: Peering Location
      description: location for session, contains an object with fields id `pdb:ix:$ID` and type PUBLIC or PRIVATE
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/LocationType'

    LocationType:
      type: string
      enum:
        - private
        - public

    SessionStatus:
      title: Session configuration status
      description: |-
        Add choices
      type: string

    LocationArray:
      title: Locations
      description: Array of peering locations
      type: array
      items:
        $ref: '#/components/schemas/Location'

    SessionRequestArray:
      title: BGP Sessions requested
      description: Array of BGP Sessions requested
      type: array
      items:
        $ref: '#/components/schemas/SessionRequestItem'

    SessionRequestItem:
      title: BGP Session Request
      description: BGP Session Request
      type: object
      properties:
        local_asn:
          type: integer
        local_ip:
          type: string
        peer_asn:
          type: integer
        peer_ip:
          type: string
        peer_type:
          type: string
        md5: # TODO or auth: md5: $key?
          type: string
        location:
          $ref: '#/components/schemas/Location'
        item_id:
          type: string
          description: unique identifier of the session in an aggregate

    SessionArray:
      title: BGP Sessions
      description: Array of BGP Sessions
      type: array
      items:
        $ref: '#/components/schemas/Session'

    Session:
      title: BGP Session
      description: BGP Session
      type: object
      properties:
        local_asn:
          type: integer
        local_ip:
          type: string
        peer_asn:
          type: integer
        peer_ip:
          type: string
        peer_type:
          type: string
        md5: # TODO or auth: md5: $key?
          type: string
        location:
          $ref: '#/components/schemas/Location'
        status:
          $ref: '#/components/schemas/SessionStatus'
        session_id:
          type: string
          description: |-
            unique identifier (also serves as request id)
            Could separate into local_ and peer_?
        item_id:
          type: string
          description: unique identifier of the session in an aggregate

    SessionReferenceArray:
      title: BGP Session References
      description: Array of BGP Session References
      type: array
      sessions:
        $ref: '#/components/schemas/SessionReference'

    SessionReference:
      title: BGP Session Reference
      description: Reference to univocally identify a BGP Session
      type: object
      properties:
        session_id:
          type: string
          description: |-
            unique identifier (also serves as request id)
            Could separate into local_ and peer_?

    Error:
      title: Error
      type: object
      description: Error object for API responses
      properties:
        errors:
          type: array
          description: |-
            Entity field specific validation and operational error messages.

            {field_name} will be substituted with the name of the field in which the validation error occured.
          items:
            $ref: '#/components/schemas/FieldError'
          readOnly: true
      required:
        - field_errors
    FieldError:
      title: FieldError
      type: object
      description: Error object for field-specific errors in API responses
      properties:
        name:
          type: string
          description: Field name
          readOnly: true
        errors:
          type: array
          description: List of error messages
          items:
            type: string
          readOnly: true
      required:
        - name
        - errors

  requests:
    CreateSessionsRequest:
      title: CreateSessionsRequest
      description: Response to a request to create sessions
      type: object
      properties:
        sessions:
          $ref: '#/components/schemas/SessionRequestArray'

  responses:
    ListLocationsResponse:
      title: ListLocationsResponse
      description: Response to a list for locations
      type: object
      properties:
        next_token:
          type: string
        locations:
          $ref: '#/components/schemas/LocationArray'

    CreateSessionsResponse:
      title: CreateSessionsResponse
      description: Response to a request to create sessions
      type: object
      properties:
        sessions:
          $ref: '#/components/schemas/SessionArray'
        errors:
          $ref: '#/components/schemas/Error'

    ListSessionsResponse:
      title: ListSessionsResponse
      description: Response to a list for sessions
      type: object
      properties:
        next_token:
          type: string
        sessions:
          $ref: '#/components/schemas/SessionArray'

    DeleteSessionsResponse:
      title: DeleteSessionsResponse
      description: Response to a request to delete sessions
      type: object
      properties:
        sessions:
          $ref: '#/components/schemas/SessionArray'
        errors:
          $ref: '#/components/schemas/Error'

    ErrorResponse:
      description: API Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              errors:
                $ref: '#/components/schemas/Error'
            required:
              - errors
          examples:
            error-example:
              value:
                errors:
                  - name: peer_asn
                    messages:
                      - asn not available at that location
